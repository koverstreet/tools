# -*- python -*-
# ex: set syntax=python:
#
# Copyright (c) 2016-2017 Krzysztof Kozlowski
# Author: Krzysztof Kozlowski <k.kozlowski.k@gmail.com>
#                             <krzk@kernel.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
#
# TODO:
# - Use consistent name for multi_v7 (builders, but this would clear the history)
# - Enable config options (like PWM FAN etc.) only when needed and respective to
#	to current config style (so don't switch exynos to 'm' or multi_v7 to 'y'...
#	and the best would be to enable it in a coherent way - 'm' for multi_v7 so
#	deferred probe won't complain)

# TODO: buildbotNetUsageData

####### REPO CONFIG

# Web-interface URL
repo_krzk_web = 'https://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux.git'
projects = {}
projects['krzk'] = {
    'name': 'krzk',
    'branches': True,
    # GIT URL for master
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux.git',
    # HTTP URL for slaves, Seoul R&D slave cannot work on GIT PROTOCOL
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux.git',
}

projects['krzk-pinctrl'] = {
    'name': 'krzk-pinctrl',
    'branches': True,
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/pinctrl/samsung.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/pinctrl/samsung.git',
}

projects['mainline'] = {
    'name': 'mainline',
    'branches': ['master'],
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git',
}

projects['next'] = {
    'name': 'next',
    'branches': ['master'],
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git',
}

projects['stable'] = {
    'name': 'stable',
    'branches': ['linux-4.0.y', 'linux-4.1.y', 'linux-4.2.y', 'linux-4.3.y',
                 'linux-4.4.y', 'linux-4.5.y', 'linux-4.6.y', 'linux-4.7.y',
                 'linux-4.8.y', 'linux-4.9.y', 'linux-4.10.y', 'linux-4.11.y',
                 'linux-4.12.y', 'linux-4.13.y', 'linux-4.14.y'],
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git',
}

projects['stable-rc'] = {
    'name': 'stable-rc',
    'branches': projects['stable']['branches'],
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable-rc.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable-rc.git',
}

want_pm_tests = False

from master_auth import master_auth_config

####### GLOBALS

from buildbot.plugins import *
from buildbot.schedulers.forcesched import ChoiceStringParameter

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['collapseRequests'] = False
# FIXME: revlinks do not work. Neither in builders nor in console log.
c['revlink'] = util.RevlinkMatch([r'git://git.kernel.org/pub/scm/linux/kernel/git/([^/]*)/([^/]*)$'],
                                 r'https://git.kernel.org/pub/scm/linux/kernel/git/\1/\2/commit/?id=%s')

####### BUILDSLAVES

# Powerfull build slave, use it instead of dumbo
c['workers'] = [
    worker.Worker('dumbo-slave',
                  master_auth_config['dumbo-slave-pass'],
                  max_builds=1,
                  # Clear git_env to fix rebuilds (rebuilds of jobs
                  # previously executed by osbuilder were reusing
                  # osbuilder's git_env).
                  properties={'git_env': {}}),
    worker.Worker('elm-slave',
                  master_auth_config['elm-slave-pass'], max_builds=1,
                  properties={'git_env': {}}),
    worker.Worker('kozik-lap-slave',
                  master_auth_config['kozik-lap-slave-pass'], max_builds=1,
                  properties={'git_env': {}}),
    worker.Worker('pi-slave',
                  master_auth_config['pi-slave-pass'], max_builds=1,
                  notify_on_missing='k.kozlowski.k+buildbot@gmail.com',
                  missing_timeout=600,
                  properties={'git_env': {}}),
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

def get_gitpoller(project_name, workdir, poll_interval):
    return changes.GitPoller(
        projects[project_name]['repo_git'],
        project=projects[project_name]['name'],
        workdir=workdir,
        branches=projects[project_name]['branches'],
        pollAtLaunch=True,
        pollinterval=poll_interval)

c['change_source'] = []
# Cronjob for each gitpoller workdir
c['change_source'].append(get_gitpoller('krzk', 'gitpoller-workdir', 180))
c['change_source'].append(get_gitpoller('krzk-pinctrl', 'gitpoller-workdir-pinctrl', 180))
c['change_source'].append(get_gitpoller('mainline', 'gitpoller-workdir-mainline', 480))
c['change_source'].append(get_gitpoller('next', 'gitpoller-workdir-next', 480))
c['change_source'].append(get_gitpoller('stable', 'gitpoller-workdir-stable', 480))
c['change_source'].append(get_gitpoller('stable-rc', 'gitpoller-workdir-stable-rc', 480))

####### BUILDERS

cmd_make = 'build-slave.sh'

def build_is_recent_kernel(name):
    if ('build-next' in name) or ('build-mainline' in name):
        return True
    if ('build-arm_exynos' in name) or ('build-arm_multi_v7' in name):
        return True
    # TODO: Test if stable is 4.15+?
    return False

def get_cmd_make_config(config=None):
    if config == None:
        config = 'defconfig'
    else:
        config = str(config) + '_defconfig'
    return [cmd_make, config]

def get_common_build_factory(env, config=None):
    step_name = str(config) + ' config' if config else 'defconfig'
    step_name = 'make ' + step_name
    f = util.BuildFactory()
    f.addStep(steps.Git(repourl=util.Interpolate(u'%(prop:repository)s'),
                        mode='incremental',
                        haltOnFailure=True,
                        env=util.Property('git_env')))
    f.addStep(steps.Compile(command=get_cmd_make_config(config),
                            haltOnFailure=True, env=env, name=step_name))
    return f

def get_build_steps_boot_trigger(name, config, env, out_dir):
    st = []
    st.append(steps.Compile(command=['build-slave-package.sh', name, out_dir],
                            haltOnFailure=True, env=env, name='Package for booting'))
    # Upload zImage, DTB and modules directory to master
    st.append(steps.FileUpload(
        workersrc=out_dir + u'arch/arm/boot/zImage',
        masterdest=util.Interpolate(u'bins-deploy/' + name + u'/%(prop:got_revision)s-zImage'),
        haltOnFailure=True, name='Upload zImage'))
    st.append(steps.FileUpload(
        workersrc=out_dir + u'arch/arm/boot/dts/exynos5422-odroidxu3-lite.dtb',
        masterdest=util.Interpolate(u'bins-deploy/' + name + u'/%(prop:got_revision)s-exynos5422-odroidxu3-lite.dtb'),
        haltOnFailure=True, name='Upload Odroid XU3 DTB'))
    st.append(steps.FileUpload(
        workersrc=out_dir + u'arch/arm/boot/dts/exynos4412-odroidu3.dtb',
        masterdest=util.Interpolate(u'bins-deploy/' + name + u'/%(prop:got_revision)s-exynos4412-odroidu3.dtb'),
        haltOnFailure=True, name='Upload Odroid U3 DTB'))
    st.append(steps.FileUpload(
        workersrc=out_dir + u'arch/arm/boot/dts/exynos5410-odroidxu.dtb',
        masterdest=util.Interpolate(u'bins-deploy/' + name + u'/%(prop:got_revision)s-exynos5410-odroidxu.dtb'),
        haltOnFailure=True, name='Upload Odroid XU DTB'))

    # XU4 and HC1 might be missing for older kernels
    st.append(steps.FileUpload(
        workersrc=out_dir + u'arch/arm/boot/dts/exynos5422-odroidxu4.dtb',
        masterdest=util.Interpolate(u'bins-deploy/' + name + u'/%(prop:got_revision)s-exynos5422-odroidxu4.dtb'),
        haltOnFailure=False, name='Upload Odroid XU4 DTB'))
    st.append(steps.FileUpload(
        workersrc=out_dir + u'arch/arm/boot/dts/exynos5422-odroidhc1.dtb',
        masterdest=util.Interpolate(u'bins-deploy/' + name + u'/%(prop:got_revision)s-exynos5422-odroidhc1.dtb'),
        haltOnFailure=False, name='Upload Odroid HC1 DTB'))

    st.append(steps.FileUpload(
        workersrc=out_dir + 'modules-out.tar.gz',
        masterdest=util.Interpolate(u'bins-deploy/' + name + u'/%(prop:got_revision)s-modules-out.tar.gz'),
        haltOnFailure=True, name='Upload modules'))
    st.append(steps.Trigger(
        schedulerNames=['deploy-boot-odroid-xu3-' + config],
        name='Boot Odroid XU3',
        set_properties={'trigger_builder': name}))
    if build_is_recent_kernel(name):
        st.append(steps.Trigger(
            schedulerNames=['deploy-boot-odroid-hc1-' + config],
            name='Boot Odroid HC1',
            set_properties={'trigger_builder': name}))
    return st

f_env = {
    'i386': {'ARCH': 'i386'},
    'x86_64': {'ARCH': 'x86_64'},
    'arm_def': {'ARCH': 'arm'},
    'arm_exynos': {'ARCH': 'arm'},
    'arm_multi': {'ARCH': 'arm'},
    'arm_mini2440': {'ARCH': 'arm'},
    'arm_s3c2410': {'ARCH': 'arm'},
    'arm_s3c6400': {'ARCH': 'arm'},
    'arm_s5pv210': {'ARCH': 'arm'},
    'arm_tct_hammer': {'ARCH': 'arm'},
    'arm64': {'ARCH': 'arm64'},
}
for key in f_env:
    f_env[key]['KBUILD_OUTPUT'] = 'out/'
    f_env[key]['PATH'] = '/opt/tools/buildbot:/usr/local/bin:${PATH}'

def get_build_steps_boot_pre_compile(builder_name, env, slaves, config):
    st = []
    if not config:
        raise ValueError('Missing config for booting')
    if not env['KBUILD_OUTPUT']:
        raise ValueError('Missing KBUILD_OUTPUT path in environment')
    st.append(steps.ShellCommand(
        command=['scripts/config', '--file', env['KBUILD_OUTPUT'] + '.config',
                 # Enable IPV6 for Odroid systemd, AUTOFS4_FS/NFS_V4 will be in exynos_defconfig around v4.5
                 '-e', 'IPV6', '-e', 'NFS_V4',
                 # Enable fan so it won't be spinning on full speed on multi_v7
                 # (PWM_FAN will be in multi_v7 around v4.5-4.6 but both
                 # won't be in older stables)
                 '-e', 'SENSORS_PWM_FAN', '-e', 'PWM_SAMSUNG',
                 # s5p-sss tests need status of selftest
                 '-d', 'CRYPTO_MANAGER_DISABLE_TESTS',
                 # Want DMATEST and TCRYPT for tests
                 '-e', 'DMATEST', '-m', 'CRYPTO_TEST',
                 # Enable Lockdep and other debugging non-heavy tools
                 '-e', 'SCHED_STACK_END_CHECK', '-e', 'DEBUG_LOCK_ALLOC',
                 '-e', 'DEBUG_ATOMIC_SLEEP', '-e', 'DEBUG_LIST',
                 # Enable build-time debugging
                 '-e', 'DEBUG_SECTION_MISMATCH',
                 # SECCOMP is required by newer Arch ARM systemd
                 '-e', 'SECCOMP',
                ],
        haltOnFailure=True,
        env=env, name='Toggle config options'))
    st.append(steps.Compile(command=[cmd_make, 'olddefconfig'],
                            haltOnFailure=True,
                            env=env, name='Make olddefconfig'))
    return st

def get_builder(builder_name, env, slaves, config=None, boot=False):
    f = get_common_build_factory(env, config)
    if boot:
        f.addSteps(get_build_steps_boot_pre_compile(builder_name, env, slaves, config))
    f.addStep(steps.Compile(command=[cmd_make], haltOnFailure=True, env=env, name='Build kernel'))
    f.addStep(steps.FileUpload(
        workersrc=env['KBUILD_OUTPUT'] + u'.config',
        masterdest=util.Interpolate(u'bins-deploy/' + builder_name + u'/%(prop:got_revision)s-config'),
        haltOnFailure=True, name='Upload config'))
    if boot and config:
        f.addSteps(get_build_steps_boot_trigger(builder_name, config,
                                                env, env['KBUILD_OUTPUT']))
    return util.BuilderConfig(name=builder_name,
                              workernames=slaves,
                              workerbuilddir='builddir',
                              factory=f)

slave_all = ['dumbo-slave', 'elm-slave', 'kozik-lap-slave']
slave_arm = list(slave_all)
slave_deploy = ['pi-slave']

c['builders'] = []
c['builders'].append(get_builder('build-i386', f_env['i386'], slave_all))
c['builders'].append(get_builder('build-x86_64', f_env['x86_64'], slave_all))
c['builders'].append(get_builder('build-arm64', f_env['arm64'], slave_all))
c['builders'].append(get_builder('build-arm_def', f_env['arm_def'], slave_arm))
c['builders'].append(get_builder('build-arm_mini2440', f_env['arm_mini2440'], slave_arm, 'mini2440'))
c['builders'].append(get_builder('build-arm_s3c2410', f_env['arm_s3c2410'], slave_arm, 's3c2410'))
c['builders'].append(get_builder('build-arm_s3c6400', f_env['arm_s3c6400'], slave_arm, 's3c6400'))
c['builders'].append(get_builder('build-arm_s5pv210', f_env['arm_s5pv210'], slave_arm, 's5pv210'))
c['builders'].append(get_builder('build-arm_tct_hammer', f_env['arm_tct_hammer'], slave_arm, 'tct_hammer'))
c['builders'].append(get_builder('build-arm_exynos', f_env['arm_exynos'], slave_arm, 'exynos', True))
c['builders'].append(get_builder('build-arm_multi_v7', f_env['arm_multi'], slave_arm, 'multi_v7', True))

builder_names_mainline = ['build-mainline-arm_exynos', 'build-mainline-arm_multi_v7']
builder_names_next = ['build-next-arm_exynos', 'build-next-arm_multi_v7']
builder_names_stable = ['build-stable-arm_exynos']
builder_names_stable_rc = ['build-stable-rc-arm_exynos']
builder_names_krzk = []
for builder in c['builders']:
    builder_names_krzk.append(str(builder.name))

# After getting names for builder_names_krzk, builders for other:
# TODO: Smarter way of generation builders and schedulers
# TODO: The builders will use same builddirs on slaves as for krzk repo which will
#		cause huge rebuild (especially after next change).
#		Maybe separate directory for repos? This could speed up building in case of multiple
#		jobs coming from repos in same time.
#		But will that help? Still the repo resides in builddir's parent and revision has to
#		to be checked out so all sources will change?
c['builders'].append(get_builder('build-mainline-arm_exynos', f_env['arm_exynos'], slave_arm, 'exynos', True))
c['builders'].append(get_builder('build-mainline-arm_multi_v7', f_env['arm_multi'], slave_arm, 'multi_v7', True))
c['builders'].append(get_builder('build-next-arm_exynos', f_env['arm_exynos'], slave_arm, 'exynos', True))
c['builders'].append(get_builder('build-next-arm_multi_v7', f_env['arm_multi'], slave_arm, 'multi_v7', True))
# Stable only with Exynos because multi_v7 could lack a lot of stuff for Odroid
c['builders'].append(get_builder('build-stable-arm_exynos', f_env['arm_exynos'], slave_arm, 'exynos', True))
c['builders'].append(get_builder('build-stable-rc-arm_exynos', f_env['arm_exynos'], slave_arm, 'exynos', True))

builder_names_build = []
for builder in c['builders']:
    builder_names_build.append(str(builder.name))

# Deployers
def is_recent_kernel(step):
    if 'stable' in str(step.getProperty('project', default='none')):
        return False
    return True

f_env_odroid = {'PATH': '/opt/tools/buildbot:/opt/tools/pi:/usr/local/bin:${PATH}'}

# Run some of the PM-QA tests. I don't want heating tests
# (thermal, cpufreq) because they stress the board needlessly.
def deploy_run_pm_tests(target, config):
    st = []
    st.append(steps.ShellCommand(
        command=['build-slave-target-cmd.sh', target, config,
                 '/usr/sbin/make -C /opt/pm-qa/cpuhotplug check'],
        logfiles={'serial0': 'serial.log'},
        lazylogfiles=True,
        env=f_env_odroid, name='PM-QA cpuhotplug tests: ' + target,
        haltOnFailure=True, doStepIf=is_recent_kernel))
    st.append(steps.ShellCommand(
        command=['build-slave-target-cmd.sh', target, config,
                 '/usr/sbin/make -C /opt/pm-qa/cpuidle check'],
        logfiles={'serial0': 'serial.log'},
        lazylogfiles=True,
        env=f_env_odroid, name='PM-QA cpuidle tests: ' + target,
        haltOnFailure=True, doStepIf=is_recent_kernel))
    st.append(steps.ShellCommand(
        command=['build-slave-target-cmd.sh', target, config,
                 '/usr/sbin/make -C /opt/pm-qa/cputopology check'],
        logfiles={'serial0': 'serial.log'},
        lazylogfiles=True,
        env=f_env_odroid, name='PM-QA cputopology tests: ' + target,
        haltOnFailure=True, doStepIf=is_recent_kernel))
    return st

def deploy_run_tests(target, config):
    st = []
    st.append(steps.ShellCommand(
        command=['build-slave-target-cmd.sh', target, config,
                 '/opt/tools/tests/all-odroid-xu3.sh'],
        logfiles={'serial0': 'serial.log'},
        lazylogfiles=True,
        env=f_env_odroid, name='Test: ' + target,
        haltOnFailure=True,
        doStepIf=is_recent_kernel))
    if want_pm_tests:
        st = st + deploy_run_pm_tests(target, config)
    return st

def get_deploy_builder(builder_name, target, config):
    f = util.BuildFactory()
    f.addStep(steps.ShellCommand(
        command=['rm', '-fr', 'lib', 'deploy-modules-out.tar.gz', 'initramfs-odroidxu3.img'],
        env=f_env_odroid, name='Remove old binaries'))
    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate(u'bins-deploy/%(prop:trigger_builder)s/%(prop:revision)s-zImage'),
        workerdest=u'/srv/tftp/zImage',
        haltOnFailure=True, mode=0644, name='Download zImage'))
    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate(u'bins-deploy/%(prop:trigger_builder)s/%(prop:revision)s-exynos5422-odroidxu3-lite.dtb'),
        workerdest=u'/srv/tftp/exynos5422-odroidxu3-lite.dtb',
        haltOnFailure=True, mode=0644, name='Download Odroid XU3 DTB'))
    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate(u'bins-deploy/%(prop:trigger_builder)s/%(prop:revision)s-exynos4412-odroidu3.dtb'),
        workerdest=u'/srv/tftp/exynos4412-odroidu3.dtb',
        haltOnFailure=True, mode=0644, name='Download Odroid U3 DTB'))
    # TODO: Switch to odroidxu dtb, what to do for older kernel?
    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate(u'bins-deploy/%(prop:trigger_builder)s/%(prop:revision)s-exynos5410-odroidxu.dtb'),
        workerdest=u'/srv/tftp/exynos5410-odroidxu.dtb',
        haltOnFailure=True, mode=0644, name='Download Odroid XU DTB'))

    # XU4 and HC1 might be missing for older kernels
    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate(u'bins-deploy/%(prop:trigger_builder)s/%(prop:revision)s-exynos5422-odroidxu4.dtb'),
        workerdest=u'/srv/tftp/exynos5422-odroidxu4.dtb',
        haltOnFailure=False, mode=0644, name='Download Odroid XU4 DTB'))
    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate(u'bins-deploy/%(prop:trigger_builder)s/%(prop:revision)s-exynos5422-odroidhc1.dtb'),
        workerdest=u'/srv/tftp/exynos5422-odroidhc1.dtb',
        haltOnFailure=False, mode=0644, name='Download Odroid HC1 DTB'))

    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate(u'bins-deploy/%(prop:trigger_builder)s/%(prop:revision)s-modules-out.tar.gz'),
        workerdest='deploy-modules-out.tar.gz',
        haltOnFailure=True, mode=0644, name='Download modules'))
    f.addStep(steps.ShellCommand(
        command=['build-slave-deploy.sh', target, config, util.Interpolate(u'%(prop:revision)s')],
        haltOnFailure=True, env=f_env_odroid,
        name='Deploy on server binaries for booting'))
    f.addStep(steps.SetPropertyFromCommand(
        command='ls lib/modules', property='kernel_version', haltOnFailure=True))
    f.addStep(steps.ShellCommand(
        command=['build-slave-boot.sh', target, config],
        logfiles={'serial0': 'serial.log'},
        lazylogfiles=True,
        env=f_env_odroid, name='Boot: ' + target, haltOnFailure=True))
    if (config == 'exynos') and (target == 'odroidxu3'):
        # Run tests only on exynos_defconfig because on multi_v7 some tests hang
        # the buildbot console and some fail because of missing modules
        # (like sound).
        # This requires also decent kernel, so do not run on stable.
        # TODO: Tests for Odroid U3 are not ready and due to network/USB
        # issue they will all fail (no way to log in)
        f.addSteps(deploy_run_tests(target, config))

    f.addStep(steps.ShellCommand(
        command=['build-slave-poweroff.sh', target, config],
        logfiles={'serial0': 'serial.log'},
        lazylogfiles=True,
        env=f_env_odroid, name='Power off: ' + target, haltOnFailure=False,
        alwaysRun=True))
    return util.BuilderConfig(name=builder_name,
                              workernames=slave_deploy,
                              workerbuilddir='builddir',
                              factory=f)

c['builders'].append(get_deploy_builder('boot-odroid-xu3-multi_v7', 'odroidxu3', 'multi_v7'))
c['builders'].append(get_deploy_builder('boot-odroid-xu3-exynos', 'odroidxu3', 'exynos'))
c['builders'].append(get_deploy_builder('boot-odroid-hc1-multi_v7', 'odroidhc1', 'multi_v7'))
c['builders'].append(get_deploy_builder('boot-odroid-hc1-exynos', 'odroidhc1', 'exynos'))

builder_names_deploy = ['boot-odroid-xu3-multi_v7', 'boot-odroid-xu3-exynos',
                        'boot-odroid-hc1-multi_v7', 'boot-odroid-hc1-exynos']

####### SCHEDULERS

# Building schedulers
import re
author_krzk = 'kozlowski'
# Change instance: Change(revision=u'', who=u'', branch=u'', comments=u'', when=, category=None, project=u'', repository=REPO, codebase=u'')
def change_commit_is_krzk(change):
    if re.search(author_krzk, change.who, flags=re.IGNORECASE):
        return True
    if re.search(author_krzk, change.comments, flags=re.IGNORECASE):
        return True
    return False

def branch_krzk(branch):
    return branch not in ['master', '__about_repo__']

# treeStableTimer=None, for building each commit
c['schedulers'] = []
for project in ('krzk', 'krzk-pinctrl'):
    c['schedulers'].append(schedulers.AnyBranchScheduler(
        name=projects[project]['name'],
        treeStableTimer=None,
        fileIsImportant=change_commit_is_krzk,
        change_filter=util.ChangeFilter(project=projects[project]['name'],
                                        branch_fn=branch_krzk),
        builderNames=builder_names_krzk))
    c['schedulers'].append(schedulers.SingleBranchScheduler(
        name=projects[project]['name'] + '-master',
        treeStableTimer=(180 + 30), # Poller + slack
        change_filter=util.ChangeFilter(project=projects[project]['name'],
                                        branch='master'),
        builderNames=builder_names_krzk))

c['schedulers'].append(schedulers.SingleBranchScheduler(
    name=projects['mainline']['name'],
    treeStableTimer=(2*480 + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['mainline']['name'], branch='master'),
    builderNames=builder_names_mainline))
c['schedulers'].append(schedulers.SingleBranchScheduler(
    name=projects['next']['name'],
    treeStableTimer=(2*480 + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['next']['name'], branch='master'),
    builderNames=builder_names_next))
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name=projects['stable']['name'],
    treeStableTimer=(2*480 + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['stable']['name']),
    builderNames=builder_names_stable))
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name=projects['stable-rc']['name'],
    treeStableTimer=(2*480 + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['stable-rc']['name']),
    builderNames=builder_names_stable_rc))
c['schedulers'].append(schedulers.ForceScheduler(
    name='force',
    builderNames=builder_names_build))
c['schedulers'].append(schedulers.ForceScheduler(
    name='force-boot',
    properties=[ChoiceStringParameter(name='trigger_builder',
                                      choices=['build-arm_exynos',
                                               'build-arm_multi_v7',
                                               'build-mainline-arm_exynos',
                                               'build-mainline-arm_multi_v7',
                                               'build-next-arm_exynos',
                                               'build-next-arm_multi_v7',
                                               'build-stable-arm_exynos',
                                               'build-stable-rc-arm_exynos'],
                                      default='build-arm_exynos',
                                      strict=True)],
    builderNames=builder_names_deploy))

# Deploying schedulers, split them per board and config because:
# On XU3: boot everything and exynos@stable
c['schedulers'].append(schedulers.Triggerable(
    name='deploy-boot-odroid-xu3-multi_v7',
    builderNames=['boot-odroid-xu3-multi_v7']))
c['schedulers'].append(schedulers.Triggerable(
    name='deploy-boot-odroid-xu3-exynos',
    builderNames=['boot-odroid-xu3-exynos']))
c['schedulers'].append(schedulers.Triggerable(
    name='deploy-boot-odroid-hc1-multi_v7',
    builderNames=['boot-odroid-hc1-multi_v7']))
c['schedulers'].append(schedulers.Triggerable(
    name='deploy-boot-odroid-hc1-exynos',
    builderNames=['boot-odroid-hc1-exynos']))

####### STATUS TARGETS

c['status'] = []

#authz_cfg=authz.Authz(
#	auth = util.HTPasswdAprAuth('/home/buildbot/htpasswd'),
#	gracefulShutdown = 'auth',
#	forceBuild = 'auth',
#	forceAllBuilds = 'auth',
##	pingBuilder = 'auth',
#	pauseSlave = 'auth',
##	stopBuild = 'auth',
#	stopAllBuilds = 'auth',
#	cancelPendingBuild = 'auth',
#	cancelAllPendingBuilds = 'auth',
#	stopChange = 'auth',
#	cleanShutdown = 'auth',
#	showUsersPage = 'auth',
#)
authz = util.Authz(
    allowRules=[util.StopBuildEndpointMatcher(role='admins'),
                util.ForceBuildEndpointMatcher(role='admins'),
                util.RebuildBuildEndpointMatcher(role='admins'),
               ],
    roleMatchers=[util.RolesFromEmails(admins=['krzk@kernel.org'])]
)

c['www'] = { 'port': 8010,
             # pip install buildbot-waterfall-view buildbot-console-view
             'plugins': {'waterfall_view': {'num_builds': 50},
                         'console_view': {},
                         'grid_view': {},
                        },
             'authz': authz,
             # FIXME: not working
             #'auth': util.HTPasswdAuth('/home/buildbot/htpasswd'),
             'auth': util.UserPasswordAuth(master_auth_config['www-auth']),
}

mn = reporters.MailNotifier(fromaddr='kozik.server+dumbo.buildbot@gmail.com',
                            sendToInterestedUsers=False,
                            mode=['failing', 'problem', 'warnings', 'exception'],
                            relayhost='localhost',
                            extraRecipients=['k.kozlowski.k+buildbot@gmail.com'])
c['services'] = []
c['services'].append(mn)

####### SOME GLOBAL SETTINGS

####### PROJECT IDENTITY

c['title'] = 'Krzk Samsung-SoC'
c['titleURL'] = repo_krzk_web
c['buildbotURL'] = 'http://www.krzk.eu/'

####### DB URL

c['db'] = {
    #'db_url' : 'sqlite:///state.sqlite',
    'db_url': 'mysql://buildbot:' + master_auth_config['mysql-pass'] + '@localhost/buildbot',
}
