# -*- python -*-
# ex: set syntax=python:

# TODO:
# - Use consistent name for multi_v7 (builders, but this would clear the history)
# - Enable config options (like PWM FAN etc.) only when needed and respective to
#	to current config style (so don't switch exynos to 'm' or multi_v7 to 'y'...
#	and the best would be to enable it in a coherent way - 'm' for multi_v7 so
#	deferred probe won't complain)

####### REPO CONFIG

project_krzk = "krzk"
branches_krzk = True
# Web-interface URL
repo_krzk_web = 'https://git.kernel.org/cgit/linux/kernel/git/krzk/linux.git'
# GIT URL for master
repo_krzk_git = 'git://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux.git'
# HTTP URL for slaves, Seoul R&D slave cannot work on GIT PROTOCOL
repo_krzk_http = 'http://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux.git'

project_mainline = "mainline"
branches_mainline = ["master"]
repo_mainline_git = 'git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git'
repo_mainline_http = 'http://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git'

project_next = "next"
branches_next = ["master"]
repo_next_git = 'git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git'
repo_next_http = 'http://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git'

project_stable = "stable"
branches_stable = ["linux-4.0.y", "linux-4.1.y", "linux-4.2.y", "linux-4.3.y", "linux-4.4.y",
			"linux-4.5.y", "linux-4.6.y"]
# , "linux-4.1.y.queue", "linux-4.2.y.queue", "linux-4.3.y.queue"?
repo_stable_git = 'git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable'
repo_stable_http = 'http://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable'

from master_auth import master_auth_config

####### GLOBALS

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# mergeRequests=False, for building each commit
c['mergeRequests'] = False
c['revlink'] = util.RevlinkMatch([r'git://git.kernel.org/pub/scm/linux/kernel/git/([^/]*)/([^/]*)$'],
				r'https://git.kernel.org/cgit/linux/kernel/git/\1/\2/commit/?id=%s')

####### BUILDSLAVES

# Powerfull build slave, use it instead of dumbo
slaves_osbuilder = "samsung-osbuilder-slave"
# TODO: Also brancaleone!
c['slaves'] = [ buildslave.BuildSlave("dumbo-slave",
			master_auth_config["dumbo-slave-pass"], max_builds=1),
	buildslave.BuildSlave("odroid-slave",
			master_auth_config["odroid-slave-pass"], max_builds=1),
	buildslave.BuildSlave("kozik-lap-slave",
			master_auth_config["kozik-lap-slave-pass"], max_builds=1),
	buildslave.BuildSlave("pi-slave",
			master_auth_config["pi-slave-pass"], max_builds=1,
			notify_on_missing="k.kozlowski.k+buildbot@gmail.com",
			missing_timeout=600),
#	buildslave.BuildSlave("virt-01-slave", "M39aCa0thgqlCbt", max_builds=1),
	# The name "samsung-osbuilder-slave" is also used in templates/introduction.html
	buildslave.BuildSlave(slaves_osbuilder,
			master_auth_config[slaves_osbuilder+"-pass"], max_builds=1,
			notify_on_missing="k.kozlowski.k+buildbot@gmail.com",
			missing_timeout=600,
			# Seoul R&D proxy:
			properties={'git_env': {'http_proxy': 'http://10.112.1.184:8080',
									'https_proxy':'https://10.112.1.184:8080', },
						},
			),
#	buildslave.BuildSlave("brancaleone-slave", "93bvAfhlaaDfzwrdy4d", max_builds=1,
#			notify_on_missing=["k.kozlowski.k+buildbot@gmail.com",
#								"Andi Shyti <andi@smida.it>"],
#			missing_timeout=600),
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

c['change_source'] = []
# Cronjob for each gitpoller workdir
c['change_source'].append(changes.GitPoller(
	repo_krzk_git, project=project_krzk,
	workdir="gitpoller-workdir", branches=branches_krzk,
	pollAtLaunch=True,
	pollinterval=300))
c['change_source'].append(changes.GitPoller(
	repo_mainline_git, project=project_mainline,
	workdir="gitpoller-workdir-mainline", branches=branches_mainline,
	pollAtLaunch=True,
	pollinterval=480))
c['change_source'].append(changes.GitPoller(
	repo_next_git, project=project_next,
	workdir="gitpoller-workdir-next", branches=branches_next,
	pollAtLaunch=True,
	pollinterval=480))
c['change_source'].append(changes.GitPoller(
	repo_stable_git, project=project_stable,
	workdir="gitpoller-workdir-stable", branches=branches_stable,
	pollAtLaunch=True,
	pollinterval=480))

####### BUILDERS

# Builders
cmd_make = 'build-slave.sh'

# next_slave_powerfull does not work well... It always choses powerfull...
def next_slave_powerfull(builder, slaves):
	for slave in slaves:
		print("Considering build slave: " + slave.slave.slavename)
		if (slave.slave.slavename == slaves_osbuilder):
			print("Found powerfull build slave: " + slaves_osbuilder)
			return slave
	print("No powerfull slave, using random choice")
	return random.choice(slaves)
	
def get_cmd_make_config(config=None):
	if (config == None):
		config = "defconfig"
	else:
		config = str(config) + "_defconfig"
	return [ cmd_make, config ]

def get_common_build_factory(repo, env, config=None):
	step_name = str(config) + " config" if config else "defconfig"
	step_name = "make " + step_name
	build_factory = util.BuildFactory()
	build_factory.addStep(steps.Git(repourl=repo, mode='incremental',
		haltOnFailure=True,
		env=util.Property('git_env')))
	build_factory.addStep(steps.ShellCommand(command=get_cmd_make_config(config),
		haltOnFailure=True, env=env, name=step_name))
	return build_factory

def get_build_steps_for_boot(name, config, env, out_dir):
	boot_steps = []
	boot_steps.append(steps.ShellCommand(command=['build-slave-package.sh', name, out_dir],
				haltOnFailure=True, env=env))
	# Upload zImage, DTB and modules directory to master
	boot_steps.append(steps.FileUpload(slavesrc=out_dir + u'arch/arm/boot/zImage',
				masterdest=util.Interpolate(u'bins-deploy/' + name + u'/%(prop:got_revision)s-zImage'),
				haltOnFailure=True, name="Upload zImage"))
	boot_steps.append(steps.FileUpload(slavesrc=out_dir + u'arch/arm/boot/dts/exynos5422-odroidxu3-lite.dtb',
				masterdest=util.Interpolate(u'bins-deploy/' + name + u'/%(prop:got_revision)s-exynos5422-odroidxu3-lite.dtb'),
				haltOnFailure=True, name="Upload Odroid XU3 DTB"))
	boot_steps.append(steps.FileUpload(slavesrc=out_dir + u'arch/arm/boot/dts/exynos4412-odroidu3.dtb',
				masterdest=util.Interpolate(u'bins-deploy/' + name + u'/%(prop:got_revision)s-exynos4412-odroidu3.dtb'),
				haltOnFailure=True, name="Upload Odroid U3 DTB"))
	# TODO: Switch to odroidxu dtb, what to do for older kernel?
	boot_steps.append(steps.FileUpload(slavesrc=out_dir + u'arch/arm/boot/dts/exynos5410-smdk5410.dtb',
				masterdest=util.Interpolate(u'bins-deploy/' + name + u'/%(prop:got_revision)s-exynos5410-smdk5410.dtb'),
				haltOnFailure=True, name="Upload Odroid XU DTB"))
	boot_steps.append(steps.FileUpload(slavesrc=out_dir + 'modules-out.tar.gz',
				masterdest=util.Interpolate(u'bins-deploy/' + name + u'/%(prop:got_revision)s-modules-out.tar.gz'),
				haltOnFailure=True, name="Upload modules"))
	boot_steps.append(steps.Trigger(schedulerNames=['deploy-boot-' + config],
				name="Boot targets",
				set_properties={'trigger_builder': name}))
	return boot_steps

f_env_path = '/opt/tools/buildbot:/usr/local/bin:${PATH}'
f_env_output_arm_exynos = 'out-arm-exynos/'
f_env_output_arm_multi = 'out-arm-multi_v7/'
f_env_i386 = {'ARCH': 'i386',
		'KBUILD_OUTPUT': 'out-i386/',
		'PATH': f_env_path}
f_env_x86_64 = {'ARCH': 'x86_64',
		'KBUILD_OUTPUT': 'out-x86_64/',
		'PATH': f_env_path}
f_env_arm_def = {'ARCH': 'arm',
		'KBUILD_OUTPUT': 'out-arm-def/',
		'PATH': f_env_path}
f_env_arm_exynos = {'ARCH': 'arm',
		'KBUILD_OUTPUT': f_env_output_arm_exynos,
		'PATH': f_env_path}
f_env_arm_multi = {'ARCH': 'arm',
		'KBUILD_OUTPUT': f_env_output_arm_multi,
		'PATH': f_env_path}
f_env_arm_mini2440 = {'ARCH': 'arm',
		'KBUILD_OUTPUT': 'out-arm-mini2440/',
		'PATH': f_env_path}
f_env_arm_s3c2410 = {'ARCH': 'arm',
		'KBUILD_OUTPUT': 'out-arm-s3c2410/',
		'PATH': f_env_path}
f_env_arm_s3c6400 = {'ARCH': 'arm',
		'KBUILD_OUTPUT': 'out-arm-s3c6400/',
		'PATH': f_env_path}
f_env_arm_s5pv210 = {'ARCH': 'arm',
		'KBUILD_OUTPUT': 'out-arm-s5pv210/',
		'PATH': f_env_path}
f_env_arm_tct_hammer = {'ARCH': 'arm',
		'KBUILD_OUTPUT': 'out-arm-tct_hammer/',
		'PATH': f_env_path}
f_env_arm64 = {'ARCH': 'arm64',
		'KBUILD_OUTPUT': 'out-arm64/',
		'PATH': f_env_path}

def get_build_boot_steps(builder_name, env, repo, slaves, config):
	st = []
	if (not config):
		raise ValueError("Missing config for booting")
	if (not env['KBUILD_OUTPUT']):
		raise ValueError("Missing KBUILD_OUTPUT path in environment")
	st.append(steps.ShellCommand(
		command=['scripts/config', '--file', env['KBUILD_OUTPUT'] + '.config',
			# Enable IPV6 for Odroid systemd, AUTOFS4_FS/NFS_V4 will be in exynos_defconfig around v4.5
			'-e', 'IPV6', '-e', 'NFS_V4',
			# Enable fan so it won't be spinning on full speed on multi_v7
			# (PWM_FAN will be in multi_v7 around v4.5-4.6 but both
			# won't be in older stables)
			'-e', 'SENSORS_PWM_FAN', '-e', 'PWM_SAMSUNG',
			# s5p-sss tests need status of selftest
			'-d', 'CRYPTO_MANAGER_DISABLE_TESTS',
			# Want DMATEST and TCRYPT for tests
			'-e', 'DMATEST', '-m', 'CRYPTO_TEST',
			# Enable Lockdep and other debugging non-heavy tools
			'-e', 'SCHED_STACK_END_CHECK', '-e', 'DEBUG_LOCK_ALLOC',
			'-e', 'DEBUG_ATOMIC_SLEEP', '-e', 'DEBUG_LIST',
			# Enable build-time debugging
			'-e', 'DEBUG_SECTION_MISMATCH',
			],
		haltOnFailure=True,
		env=env, name="toggle config options"))
	st.append(steps.ShellCommand(
		command=[cmd_make, "olddefconfig"],
		haltOnFailure=True,
		env=env, name="make olddefconfig"))
	return st

def get_builder(builder_name, env, repo, slaves, config=None, boot=False):
	factory = get_common_build_factory(repo, env, config)
	if (boot):
		factory.addSteps(get_build_boot_steps(builder_name, env, repo, slaves, config))
	factory.addStep(steps.ShellCommand(command=[cmd_make], haltOnFailure=True, env=env, name="build kernel"))
	factory.addStep(steps.FileUpload(slavesrc=env['KBUILD_OUTPUT'] + u'.config',
				masterdest=util.Interpolate(u'bins-deploy/' + builder_name + u'/%(prop:got_revision)s-config'),
				haltOnFailure=True, name="Upload config"))
	if (boot and config):
		factory.addSteps(get_build_steps_for_boot(builder_name, config, env, env['KBUILD_OUTPUT']))
	return util.BuilderConfig(name=builder_name,
		slavenames=slaves,
		#nextSlave=next_slave_powerfull,
		slavebuilddir="builddir",
		factory=factory)

slave_all = ["dumbo-slave", "kozik-lap-slave", slaves_osbuilder] # , "brancaleone-slave"
slave_arm = list(slave_all)
slave_deploy = ["pi-slave"]
#slave_arm.append("odroid-slave")

c['builders'] = []
c['builders'].append(get_builder("build-i386", f_env_i386, repo_krzk_http, slave_all))
c['builders'].append(get_builder("build-x86_64", f_env_x86_64, repo_krzk_http, slave_all))
c['builders'].append(get_builder("build-arm64", f_env_arm64, repo_krzk_http, slave_all))
c['builders'].append(get_builder("build-arm_def", f_env_arm_def, repo_krzk_http, slave_arm))
c['builders'].append(get_builder("build-arm_mini2440", f_env_arm_mini2440, repo_krzk_http, slave_arm, "mini2440"))
c['builders'].append(get_builder("build-arm_s3c2410", f_env_arm_s3c2410, repo_krzk_http, slave_arm, "s3c2410"))
c['builders'].append(get_builder("build-arm_s3c6400", f_env_arm_s3c6400, repo_krzk_http, slave_arm, "s3c6400"))
c['builders'].append(get_builder("build-arm_s5pv210", f_env_arm_s5pv210, repo_krzk_http, slave_arm, "s5pv210"))
c['builders'].append(get_builder("build-arm_tct_hammer", f_env_arm_tct_hammer, repo_krzk_http, slave_arm, "tct_hammer"))
c['builders'].append(get_builder("build-arm_exynos", f_env_arm_exynos, repo_krzk_http, slave_arm, "exynos", True))
c['builders'].append(get_builder("build-arm_multi", f_env_arm_multi, repo_krzk_http, slave_arm, "multi_v7", True))

builder_names_mainline = ["build-mainline-arm_exynos", "build-mainline-arm_multi_v7"]
builder_names_next = ["build-next-arm_exynos", "build-next-arm_multi_v7"]
builder_names_stable = ["build-stable-arm_exynos"]
builder_names_krzk = []
for builder in c['builders']:
	builder_names_krzk.append(builder.name)

# After getting names for builder_names_krzk, builders for other:
# TODO: Smarter way of generation builders and schedulers
# TODO: The builders will use same builddirs on slaves as for krzk repo which will
#		cause huge rebuild (especially after next change).
#		Maybe separate directory for repos? This could speed up building in case of multiple
#		jobs coming from repos in same time.
#		But will that help? Still the repo resides in builddir's parent and revision has to
#		to be checked out so all sources will change?
c['builders'].append(get_builder("build-mainline-arm_exynos", f_env_arm_exynos, repo_mainline_http, slave_arm, "exynos", True))
c['builders'].append(get_builder("build-mainline-arm_multi_v7", f_env_arm_multi, repo_mainline_http, slave_arm, "multi_v7", True))
c['builders'].append(get_builder("build-next-arm_exynos", f_env_arm_exynos, repo_next_http, slave_arm, "exynos", True))
c['builders'].append(get_builder("build-next-arm_multi_v7", f_env_arm_multi, repo_next_http, slave_arm, "multi_v7", True))
# Stable only with Exynos because multi_v7 could lack a lot of stuff for Odroid
c['builders'].append(get_builder("build-stable-arm_exynos", f_env_arm_exynos, repo_stable_http, slave_arm, "exynos", True))

builder_names_all = []
for builder in c['builders']:
	builder_names_all.append(builder.name)

# Deployers
f_env_odroid = {'PATH': "/opt/tools/buildbot:/opt/tools/pi:/usr/local/bin:${PATH}"}
def get_deploy_builder(builder_name, target, config):
	factory = util.BuildFactory()
	factory.addStep(steps.ShellCommand(command=['rm', '-fr', 'lib', 'deploy-modules-out.tar.gz', 'initramfs-odroidxu3.img'],
			env=f_env_odroid, name="Remove old binaries"))
	factory.addStep(steps.FileDownload(mastersrc=util.Interpolate(u'bins-deploy/%(prop:trigger_builder)s/%(prop:revision)s-zImage'),
			slavedest=u'/srv/tftp/zImage',
			haltOnFailure=True, mode=0644, name="Download zImage"))
	factory.addStep(steps.FileDownload(mastersrc=util.Interpolate(u'bins-deploy/%(prop:trigger_builder)s/%(prop:revision)s-exynos5422-odroidxu3-lite.dtb'),
			slavedest=u'/srv/tftp/exynos5422-odroidxu3-lite.dtb',
			haltOnFailure=True, mode=0644, name="Download Odroid XU3 DTB"))
	factory.addStep(steps.FileDownload(mastersrc=util.Interpolate(u'bins-deploy/%(prop:trigger_builder)s/%(prop:revision)s-exynos4412-odroidu3.dtb'),
			slavedest=u'/srv/tftp/exynos4412-odroidu3.dtb',
			haltOnFailure=True, mode=0644, name="Download Odroid U3 DTB"))
	# TODO: Switch to odroidxu dtb, what to do for older kernel?
	factory.addStep(steps.FileDownload(mastersrc=util.Interpolate(u'bins-deploy/%(prop:trigger_builder)s/%(prop:revision)s-exynos5410-smdk5410.dtb'),
			slavedest=u'/srv/tftp/exynos5410-smdk5410.dtb',
			haltOnFailure=True, mode=0644, name="Download Odroid XU DTB"))
	factory.addStep(steps.FileDownload(mastersrc=util.Interpolate(u'bins-deploy/%(prop:trigger_builder)s/%(prop:revision)s-modules-out.tar.gz'),
			slavedest='deploy-modules-out.tar.gz',
			haltOnFailure=True, mode=0644, name="Download modules"))
	factory.addStep(steps.ShellCommand(command=['build-slave-deploy.sh', target, config, util.Interpolate(u'%(prop:revision)s')],
				haltOnFailure=True, env=f_env_odroid))
	factory.addStep(steps.SetPropertyFromCommand(command="ls lib/modules", property="kernel_version", haltOnFailure=True))
	factory.addStep(steps.ShellCommand(
			command=[ 'build-slave-boot.sh', target, config ],
			logfiles={ 'serial0': 'serial.log' },
			lazylogfiles=True,
			env=f_env_odroid, name="Boot: " + target, haltOnFailure=True))
	if ((config == "exynos") and (target == "odroidxu3")):
		# Run tests only on exynos_defconfig because on multi_v7 some tests hang
		# the buildbot console and some fail because of missing modules
		# (like sound).
		# TODO: Tests for Odroid U3 are not ready and due to network/USB
		# issue they will all fail (no way to log in)
		factory.addStep(steps.ShellCommand(
				command=[ 'build-slave-test.sh', target, config,
					util.Property("project", default="none") ],
				logfiles={ 'serial0': 'serial.log' },
				lazylogfiles=True,
				env=f_env_odroid, name="Test: " + target, haltOnFailure=True))
	factory.addStep(steps.ShellCommand(
			command=[ 'build-slave-poweroff.sh', target, config ],
			logfiles={ 'serial0': 'serial.log' },
			lazylogfiles=True,
			env=f_env_odroid, name="Power off: " + target, haltOnFailure=False,
			alwaysRun=True))
	return util.BuilderConfig(name=builder_name,
		slavenames=slave_deploy,
		slavebuilddir="builddir",
		factory=factory)

c['builders'].append(get_deploy_builder("boot-odroid-xu3-multi_v7", "odroidxu3", "multi_v7"))
c['builders'].append(get_deploy_builder("boot-odroid-xu3-exynos", "odroidxu3", "exynos"))

####### SCHEDULERS

# Building schedulers
import re
AUTHOR_KRZK = "kozlowski"
# Change instance: Change(revision=u'', who=u'', branch=u'', comments=u'', when=, category=None, project=u'', repository=REPO, codebase=u'')
def change_commit_is_krzk(change):
	if (re.search(AUTHOR_KRZK, change.who, flags=re.IGNORECASE)):
		return True
	if (re.search(AUTHOR_KRZK, change.comments, flags=re.IGNORECASE)):
		return True
	return False

# treeStableTimer=None, for building each commit
c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
	name=project_krzk,
	treeStableTimer=None,
	fileIsImportant=change_commit_is_krzk,
	change_filter=util.ChangeFilter(project=project_krzk),
	builderNames=builder_names_krzk))
c['schedulers'].append(schedulers.SingleBranchScheduler(
	name=project_mainline,
	treeStableTimer=1000, # 2*Poller + slack
	change_filter=util.ChangeFilter(project=project_mainline),
	builderNames=builder_names_mainline))
c['schedulers'].append(schedulers.SingleBranchScheduler(
	name=project_next,
	treeStableTimer=1000, # 2*Poller + slack
	change_filter=util.ChangeFilter(project=project_next),
	builderNames=builder_names_next))
c['schedulers'].append(schedulers.SingleBranchScheduler(
	name=project_stable,
	treeStableTimer=1000, # 2*Poller + slack
	change_filter=util.ChangeFilter(project=project_stable),
	builderNames=builder_names_stable))
c['schedulers'].append(schedulers.ForceScheduler(
	name="force",
	builderNames=builder_names_all))

# Deploying schedulers
c['schedulers'].append(schedulers.Triggerable(
	name="deploy-boot-multi_v7",
	builderNames=["boot-odroid-xu3-multi_v7"]))
c['schedulers'].append(schedulers.Triggerable(
	name="deploy-boot-exynos",
	builderNames=["boot-odroid-xu3-exynos"]))

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
	auth = util.HTPasswdAprAuth('/home/buildbot/htpasswd'),
	gracefulShutdown = 'auth',
	forceBuild = 'auth',
	forceAllBuilds = 'auth',
	pingBuilder = 'auth',
	pauseSlave = 'auth',
	stopBuild = 'auth',
	stopAllBuilds = 'auth',
	cancelPendingBuild = 'auth',
	cancelAllPendingBuilds = 'auth',
	stopChange = 'auth',
	cleanShutdown = 'auth',
	showUsersPage = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

mn = status.MailNotifier(fromaddr="kozik.server+dumbo.buildbot@gmail.com",
	sendToInterestedUsers=False,
	mode=["failing", "problem", "warnings", "exception"],
	relayhost="localhost",
	extraRecipients=['k.kozlowski.k+buildbot@gmail.com'])
c['status'].append(mn)

####### PROJECT IDENTITY

c['title'] = "krzk samsung-soc Linux"
c['titleURL'] = repo_krzk_web
c['buildbotURL'] = "http://www.krzk.eu/"

####### DB URL

c['db'] = {
	'db_url' : "sqlite:///state.sqlite",
}
